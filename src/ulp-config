#!/bin/bash
# Copyright (C) 2024 Rong Tao
#
set -e

readonly ANSI_BOLD="\033[1m"
readonly ANSI_GRAY="\033[2m"
readonly ANSI_UNDERLINE="\033[4m"
readonly ANSI_RESET="\033[m"

already_run=
declare -a cflags libs


__usage__()
{
	echo -e "
${ANSI_BOLD}NAME${ANSI_RESET}
    ulp-config - Print ULPatch compilation options

${ANSI_BOLD}SYNOPSIS${ANSI_RESET}
    ${ANSI_BOLD}ulp-config${ANSI_RESET} [${ANSI_UNDERLINE}options${ANSI_RESET}]

${ANSI_BOLD}DESCRIPTION${ANSI_RESET}
    ulp-config makes it easier to build ulpatch that use ULPatch. It  can print
    the  compiler flags, linker  flags  and  object  libraries  needed  to link
    against ULPatch.

${ANSI_BOLD}ARGUMENT${ANSI_RESET}

   --cflags           Print the C compiler flags needed to use ULPatch headers.

   --libs             Print all the libraries needed to link against the speci-
                      fied ULPatch components, including any dependencies.

   -h, --help         show this help information

${ANSI_BOLD}SEE ALSO${ANSI_RESET}
   ulpinfo(8), ulftrace(8), ultask(8), ulp-config(8)

" >&2

	exit ${1-0}
}

goodbye()
{
	local ret=$?
}

trap "goodbye" EXIT

print_cflags()
{
	already_run=YES
	cflags+=( "-I/usr/include/" )
	cflags+=( "-D_GNU_SOURCE" )
	echo -n ${cflags[@]}
}

print_libs()
{
	already_run=YES
	echo -n ${libs[@]}
}

TEMP=$(getopt \
	--options h \
	--long cflags \
	--long libs \
	--long help \
	-n ulp-config -- "$@")

test $? != 0 && __usage__ 1

eval set -- "$TEMP"

while true; do
	case $1 in
	--cflags)
		shift
		print_cflags
		;;
	--libs)
		shift
		print_libs
		;;
	-h|--help)
		shift
		__usage__
		;;
	--)
		shift
		break
		;;
	esac
done

if [[ -z ${already_run} ]]; then
	__usage__ 1
else
	# Need newline(\n) here
	echo
fi
